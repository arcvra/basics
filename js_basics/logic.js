/* 
üîπ 1Ô∏è‚É£ Condicionales IF y ELSE
* `If` eval√∫a una condici√≥n, ejecutando el c√≥digo √∫nicamente si esta se cumple.
* `Else` permite ejecutar un bloque alternativo si la condici√≥n no se cumple.
* De no haber un else el c√≥digo contin√∫a una vez analizada la condici√≥n
*/

let age = 18;

if (age >= 18) {
    console.log("Eres mayor de edad.");
} else {
    console.log("Eres menor de edad.");
}

/* 
üîπ 2Ô∏è‚É£ ELSE IF
Se usa cuando hay m√∫ltiples condiciones posibles.
*/

let temperatura = 25;

if (temperatura > 30) {
    console.log("Hace mucho calor.");
} else if (temperatura > 20) {
    console.log("El clima es agradable.");
} else {
    console.log("Hace fr√≠o.");
}

/*
üîπ 3Ô∏è‚É£ Operador ternario (?)
* Es una versi√≥n simplificada de `if` y `else`
* Si bien √∫til, se aconseja usar con moderaci√≥n: 
    menos c√≥digo != mejor c√≥digo
    c√≥digo legible > menos c√≥digo
*/

let msg = (age >= 18) ? "Acceso permitido" : "Acceso denegado";
console.log(msg);

/*
üîπ 4Ô∏è‚É£ Encadenamiento de ternarias
* Puede ser √∫til, pero si hay demasiadas condiciones, un if-else puede ser m√°s claro.
*/

let clima = (temperatura > 30) ? "Caluroso" :
    (temperatura > 20) ? "Templado" : "Fr√≠o";

console.log(clima);

/*
üîπ 5Ô∏è‚É£ Switch-case
* Eval√∫a expresiones respecto a un valor `case` anteriormente definido 
* Ejecuta el c√≥digo correspondiente hasta encontrarse con un `break` que "rompe" el flujo
    si ejecuta un `case` que no contiene break, continuar√° ejecutando el resto del c√≥digo hasta encontrar uno
    a esto se le llama "fall-through" (ca√≠da en cascada)
* En caso de no encontrar ning√∫n `case` que corresponda salta al `default`
    - de no encontrar un default el `switch` se omite y contin√∫a el c√≥digo, sin devolver nada
*/

let day = "lunes";

switch (day) {
    case "lunes":
        console.log("Inicio de semana");
        break;
    case "viernes":
        console.log("Viernes de chill");
        break;
    case "s√°bado": // para concatenar m√°s de un `case` √∫nicamente se escriben uno seguido de otro
    case "domingo":
        console.log("Fin de semana");
        break;
    default:
        console.log("D√≠a normal");
}

// Veamos un escenario en el que coincide un `case` con la expresi√≥n dada pero no tiene `break`

let fruta = "manzana";

switch (fruta) {
    case "manzana":
        console.log("Es una manzana."); // Imprimir√° el texto en la consola
    case "pera": 
        console.log("O quiz√° una pera..."); // Al no haber un `break` en el caso anterior, tambi√©n se ejecutar√°
        break;
    default:
        console.log("No es ni manzana ni pera.");
}

// A√∫n as√≠, el fall-through puede ser intencionado y √∫til dependiendo del escenario

// Ejemplo donde el fall-through es intencionado
let nivel = "avanzado";

switch (nivel) {
    case "avanzado":
        console.log("Y acceso completo al contenido avanzado.");
    case "intermedio":
        /*
        Al no haber un `break` en el nivel "avanzado", el c√≥digo contin√∫a ejecut√°ndose
        * esto permite que "avanzado" tambi√©n acceda a "intermedio" y eventualmente a "b√°sico"
        */
        console.log("Tambi√©n puedes ver contenido intermedio."); 
    case "b√°sico":
        /*
        Sin embargo, b√°sico √∫nicamente es capaz de acceder a s√≠ mismo:
        * una vez detectado "b√°sico" se cierra la ejecuci√≥n del resto c√≥digo
        */
        console.log("Tienes acceso al contenido b√°sico.");
        break;
    default:
        console.log("Nivel no reconocido.");
}
